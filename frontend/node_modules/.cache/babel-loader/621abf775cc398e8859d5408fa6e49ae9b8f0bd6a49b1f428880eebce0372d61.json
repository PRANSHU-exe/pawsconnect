{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prans\\\\pawsconnect\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('authToken');\n      const userData = localStorage.getItem('userData');\n      if (token && userData) {\n        try {\n          // Verify token with backend using /me endpoint\n          const response = await fetch('http://localhost:5000/api/auth/me', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          const data = await response.json();\n          if (data.success) {\n            // Token is valid, use fresh user data from server\n            setUser(data.data.user);\n            // Update stored user data with fresh data\n            localStorage.setItem('userData', JSON.stringify(data.data.user));\n          } else {\n            // Token is invalid, clear stored data\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('userData');\n          }\n        } catch (error) {\n          console.error('Token verification failed:', error);\n          // Clear stored data on error\n          localStorage.removeItem('authToken');\n          localStorage.removeItem('userData');\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('authToken', token);\n    localStorage.setItem('userData', JSON.stringify(userData));\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","initializeAuth","token","localStorage","getItem","userData","response","fetch","method","headers","data","json","success","setItem","JSON","stringify","removeItem","error","console","login","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/prans/pawsconnect/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const token = localStorage.getItem('authToken');\r\n      const userData = localStorage.getItem('userData');\r\n      \r\n      if (token && userData) {\r\n        try {\r\n          // Verify token with backend using /me endpoint\r\n          const response = await fetch('http://localhost:5000/api/auth/me', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n          \r\n          const data = await response.json();\r\n          \r\n          if (data.success) {\r\n            // Token is valid, use fresh user data from server\r\n            setUser(data.data.user);\r\n            // Update stored user data with fresh data\r\n            localStorage.setItem('userData', JSON.stringify(data.data.user));\r\n          } else {\r\n            // Token is invalid, clear stored data\r\n            localStorage.removeItem('authToken');\r\n            localStorage.removeItem('userData');\r\n          }\r\n        } catch (error) {\r\n          console.error('Token verification failed:', error);\r\n          // Clear stored data on error\r\n          localStorage.removeItem('authToken');\r\n          localStorage.removeItem('userData');\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = (userData, token) => {\r\n    setUser(userData);\r\n    localStorage.setItem('authToken', token);\r\n    localStorage.setItem('userData', JSON.stringify(userData));\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userData');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}